// Set valid ExtJS loading path (/vendor/assets/extjs4/src)
// Ext.Loader.setPath('Ext', '/assets/extjs4/src');
Ext.Loader.setConfig({
	enabled:true  
});

Ext.application({
	
	<% Dir[File.expand_path('../app/*/', __FILE__)].each do |subdir| %>
		<%= File.basename(subdir) %>s: <%=
		# omit all file extensions (js, js.erb, etc.) from the file name
		Dir[subdir + '/*.js*'].map {|f| File.basename(f)[/^[^.]+/] }.to_json
		%>,
	<% end %>

// ... the rest of your ExtJS 4 application definition goes here ...
// the global namespace
     name: 'AM',
     appFolder: '/assets/app',
     autoCreateViewport: true,
});






Ext.onReady(function(){
	Ext.Ajax.on('beforerequest', function(conn, options) {
		// always include the auth_token.. 
			var currentUser = Ext.decode( localStorage.getItem('currentUser'));

			if( currentUser !== null){
				var auth_token_value = currentUser['auth_token'];

				Ext.Ajax.extraParams = { auth_token: auth_token_value };
			}
		// include the csrf prevention 
	    var content, metatag;
	    metatag = Ext.select('meta[name="csrf-token"]');
	    if (metatag.first() != null) {
	      content = metatag.first().dom.content;
	      options.headers || (options.headers = {});
	      return options.headers["X-CSRF-Token"] = content;
	    }
	  }, this);
	
		//  		Ext.form.field.ComboBox.override( {
		//     setValue: function(v) {
		//         // v = (v && v.toString) ? v.toString() : v;
		// 		
		//         if(!this.store.isLoaded && this.queryMode == 'remote' && v) {
		// 						console.log("FIRST branch");
		//             this.store.addListener('load', function() {
		// 								
		//                 this.store.isLoaded = true;
		// 								console.log("The value of v is " + v);
		// 								var text = v;
		// 								var record = this.store.findRecord( this.valueField, v);
		// 								if(record){
		// 									text = record.get( this.displayField);  
		// 									this.lastSelectionText = text; 
		// 									this.value = record.get( this.valueField);
		// 								}
		// 								
		//             }, this);
		// 					
		// 						this.store.load({
		// 							params : {
		// 								selected_id : v
		// 							}
		// 						});
		//         } else {
		// 						console.log("SECOND branch");
		// 						if(v){
		// 							this.callOverridden(arguments);
		// 						}
		//             
		//         }
		//     }
		// });
});

 

