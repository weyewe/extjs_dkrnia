// Set valid ExtJS loading path (/vendor/assets/extjs4/src)
// Ext.Loader.setPath('Ext', '/assets/extjs4/src');
Ext.Loader.setConfig({
	enabled:true  
});

Ext.application({
	
	<% Dir[File.expand_path('../app/*/', __FILE__)].each do |subdir| %>
		<%= File.basename(subdir) %>s: <%=
		# omit all file extensions (js, js.erb, etc.) from the file name
		Dir[subdir + '/*.js*'].map {|f| File.basename(f)[/^[^.]+/] }.to_json
		%>,
	<% end %>

// ... the rest of your ExtJS 4 application definition goes here ...
// the global namespace
     name: 'AM',
     appFolder: '/assets/app',
     autoCreateViewport: true,
});






Ext.onReady(function(){
	Ext.Ajax.on('beforerequest', function(conn, options) {
		// always include the auth_token.. 
			var currentUser = Ext.decode( localStorage.getItem('currentUser'));

			if( currentUser !== null){
				var auth_token_value = currentUser['auth_token'];

				Ext.Ajax.extraParams = { auth_token: auth_token_value };
			}
		// include the csrf prevention 
	    var content, metatag;
	    metatag = Ext.select('meta[name="csrf-token"]');
	    if (metatag.first() != null) {
	      content = metatag.first().dom.content;
	      options.headers || (options.headers = {});
	      return options.headers["X-CSRF-Token"] = content;
	    }
	  }, this);
	
		console.log("Overriding combobox");
 		Ext.form.field.ComboBox.override( {
		    setValue: function(v) {
		        // v = (v && v.toString) ? v.toString() : v;

		        if(!this.store.isLoaded && this.queryMode == 'remote' && v) {
								
								
		            this.store.addListener('load', function() {
		                this.store.isLoaded = true;
								
		
										var text = v;
										if(this.valueField){
											// var r = this.findRecord(this.valueField, v);
											var r = this.store.findRecord( this.valueField, v);
											if(r){
												text = r.get( this.displayField); //r.data[this.displayField];
												console.log("The text is : " + text);
											}else if(this.valueNotFoundText !== undefined){
												text = this.valueNotFoundText;
											}
										}
										this.lastSelectionText = text;
										if(this.hiddenField){
											this.hiddenField.value = v;
										}
										Ext.form.ComboBox.superclass.setValue.call(this, text);
										this.value = r.get( this.valueField);
										
										
		            }, this);
							
		           this.store.load({
								params : {
									selected_id : v
								}
							});
		        } else {
		            this.callOverridden(arguments);
		        }
		    }
		});
});


// setValue : function(v){
// 	var text = v;
// 	if(this.valueField){
// 		var r = this.findRecord(this.valueField, v);
// 		if(r){
// 			text = r.data[this.displayField];
// 		}else if(this.valueNotFoundText !== undefined){
// 			text = this.valueNotFoundText;
// 		}
// 	}
// 	this.lastSelectionText = text;
// 	if(this.hiddenField){
// 		this.hiddenField.value = v;
// 	}
// 	Ext.form.ComboBox.superclass.setValue.call(this, text);
// 	this.value = v;
// },

